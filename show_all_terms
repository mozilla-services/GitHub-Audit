#/usr/bin/env bash

GREP=$(which rg)
[[ -x $GREP ]] || GREP=grep
GREP_OPTS="-A 1"
LIST_ONLY=false
NO_SEARCH=false
WORKDIR="${WORKDIR:-/tmp/$USER-${0##*/}}"

USAGE="usage: ${0##*/} term scope...
Show context of term in specified repos

Options:
    --grep-opts	    opts for $GREP (default: $GREP_OPTS)
    --list-only	    skip GitHub search & clone - just search
    --no-search	    skip GitHub search
    --workdir	    directory to put repos in (default $WORKDIR)
    -h|--help	    output this help
"

set -eu

warn() { for m; do echo "$m"; done 1>&2 ; }
die() { warn "$@" ; exit 2; }
usage() { warn "$@" "${USAGE:-}" ; [[ $# == 0 ]] && exit 0 || exit 1;}


# Parse options
while [[ $# -gt 0 ]]; do
    case "$1" in
	--grep-opts) GREP_OPTS="$2" ; shift ;;
	--list-only) LIST_ONLY=true ;;
	--no-search) NO_SEARCH=true ;;
	--workdir) WORKDIR="$2" ; shift ;;
	-h|--help) usage ;;
	-*) usage "Unknown option '$1'" ;;
	*) break ;;
    esac
    shift
done

# Now have non-option args
test $# -ge 2 || usage "Missing args"
term="$1"
shift

mkdir -p "$WORKDIR" &>/dev/null || die "Can't creat '$WORKDIR'"

if $NO_SEARCH || $LIST_ONLY ; then
    repo=( "$@" )
else
    repo=( $(./term_search.py --debug --term "$term" "$@") )
fi

cd "$WORKDIR"
for ((i=0; i<${#repo[@]}; i++)); do
    r=${repo[$i]}
    echo -e "#####\nRepo $r"
    repo="${r##*/}"
    user="${r%/*}"
    org_dir="${WORKDIR}/${user}"
    repo_dir="${org_dir}/${repo}"
    mkdir -p "${org_dir}" || die "Can't create '${org_dir}'"
    cd "${org_dir}"
    (
	if $LIST_ONLY ; then
	    cd "${repo_dir}"
	elif [[ -d "${repo}" ]] ; then
	    cd "${repo_dir}"
	    git pull --depth 1 
	else
	    git clone --depth 1 https://github.com/$r
	    cd "${repo_dir}"
	fi
        rg $GREP_OPTS "$term" .
    )
done
